{"ast":null,"code":"// import { Injectable } from '@angular/core';\n// import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\n// import { Observable, of, throwError } from 'rxjs';\n// import { delay, materialize, dematerialize } from 'rxjs/operators';\n//\n// // array in local storage for registered users\n// const usersKey = 'angular-14-registration-login-example-users';\n// let users: any[] = JSON.parse(localStorage.getItem(usersKey)!) || [];\n//\n// @Injectable()\n// export class FakeBackendInterceptor implements HttpInterceptor {\n//     intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n//         const { url, method, headers, body } = request;\n//\n//         return handleRoute();\n//\n//         function handleRoute() {\n//             switch (true) {\n//                 case url.endsWith('/users/authenticate') && method === 'POST':\n//                     return authenticate();\n//                 case url.endsWith('/users/register') && method === 'POST':\n//                     return register();\n//                 case url.endsWith('/users') && method === 'GET':\n//                     return getUsers();\n//                 case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n//                     return getUserById();\n//                 case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n//                     return updateUser();\n//                 case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n//                     return deleteUser();\n//                 default:\n//                     // pass through any requests not handled above\n//                     return next.handle(request);\n//             }\n//         }\n//\n//         // route functions\n//\n//         function authenticate() {\n//             const { username, password } = body;\n//             const user = users.find(x => x.username === username && x.password === password);\n//             if (!user) return error('Username or password is incorrect');\n//             return ok({\n//                 ...basicDetails(user),\n//                 token: 'fake-jwt-token'\n//             })\n//         }\n//\n//         function register() {\n//             const user = body\n//\n//             if (users.find(x => x.username === user.username)) {\n//                 return error('Username \"' + user.username + '\" is already taken')\n//             }\n//\n//             user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n//             users.push(user);\n//             localStorage.setItem(usersKey, JSON.stringify(users));\n//             return ok();\n//         }\n//\n//         function getUsers() {\n//             if (!isLoggedIn()) return unauthorized();\n//             return ok(users.map(x => basicDetails(x)));\n//         }\n//\n//         function getUserById() {\n//             if (!isLoggedIn()) return unauthorized();\n//\n//             const user = users.find(x => x.id === idFromUrl());\n//             return ok(basicDetails(user));\n//         }\n//\n//         function updateUser() {\n//             if (!isLoggedIn()) return unauthorized();\n//\n//             let params = body;\n//             let user = users.find(x => x.id === idFromUrl());\n//\n//             // only update password if entered\n//             if (!params.password) {\n//                 delete params.password;\n//             }\n//\n//             // update and save user\n//             Object.assign(user, params);\n//             localStorage.setItem(usersKey, JSON.stringify(users));\n//\n//             return ok();\n//         }\n//\n//         function deleteUser() {\n//             if (!isLoggedIn()) return unauthorized();\n//\n//             users = users.filter(x => x.id !== idFromUrl());\n//             localStorage.setItem(usersKey, JSON.stringify(users));\n//             return ok();\n//         }\n//\n//         // helper functions\n//\n//         function ok(body?: any) {\n//             return of(new HttpResponse({ status: 200, body }))\n//                 .pipe(delay(500)); // delay observable to simulate server api call\n//         }\n//\n//         function error(message: string) {\n//             return throwError(() => ({ error: { message } }))\n//                 .pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);\n//         }\n//\n//         function unauthorized() {\n//             return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }))\n//                 .pipe(materialize(), delay(500), dematerialize());\n//         }\n//\n//         function basicDetails(user: any) {\n//             const { id, username, firstName, lastName } = user;\n//             return { id, username, firstName, lastName };\n//         }\n//\n//         function isLoggedIn() {\n//             return headers.get('Authorization') === 'Bearer fake-jwt-token';\n//         }\n//\n//         function idFromUrl() {\n//             const urlParts = url.split('/');\n//             return parseInt(urlParts[urlParts.length - 1]);\n//         }\n//     }\n// }\n//\n// export const fakeBackendProvider = {\n//     // use fake backend in place of Http service for backend-less development\n//     provide: HTTP_INTERCEPTORS,\n//     useClass: FakeBackendInterceptor,\n//     multi: true\n// };","map":null,"metadata":{},"sourceType":"script"}