{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { Router, ActivatedRoute } from '@angular/router';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { first } from 'rxjs/operators';\n//\n// import { AccountService, AlertService } from '../_services';\n//\n// @Component({ templateUrl: 'add-edit.component.html' })\n// export class AddEditComponent implements OnInit {\n//     form!: FormGroup;\n//     id?: string;\n//     title!: string;\n//     loading = false;\n//     submitting = false;\n//     submitted = false;\n//\n//     constructor(\n//         private formBuilder: FormBuilder,\n//         private route: ActivatedRoute,\n//         private router: Router,\n//         private accountService: AccountService,\n//         private alertService: AlertService\n//     ) { }\n//\n//     ngOnInit() {\n//         this.id = this.route.snapshot.params['id'];\n//\n//         // form with validation rules\n//         this.form = this.formBuilder.group({\n//             firstName: ['', Validators.required],\n//             lastName: ['', Validators.required],\n//             username: ['', Validators.required],\n//             // password only required in add mode\n//             password: ['', [Validators.minLength(6), ...(!this.id ? [Validators.required] : [])]]\n//         });\n//\n//         this.title = 'Add User';\n//         if (this.id) {\n//             // edit mode\n//             this.title = 'Edit User';\n//             this.loading = true;\n//             this.accountService.getById(this.id)\n//                 .pipe(first())\n//                 .subscribe(x => {\n//                     this.form.patchValue(x);\n//                     this.loading = false;\n//                 });\n//         }\n//     }\n//\n//     // convenience getter for easy access to form fields\n//     get f() { return this.form.controls; }\n//\n//     onSubmit() {\n//         this.submitted = true;\n//\n//         // reset alerts on submit\n//         this.alertService.clear();\n//\n//         // stop here if form is invalid\n//         if (this.form.invalid) {\n//             return;\n//         }\n//\n//         this.submitting = true;\n//         this.saveUser()\n//             .pipe(first())\n//             .subscribe({\n//                 next: () => {\n//                     this.alertService.success('User saved', { keepAfterRouteChange: true });\n//                     this.router.navigateByUrl('/users');\n//                 },\n//                 error: error => {\n//                     this.alertService.error(error);\n//                     this.submitting = false;\n//                 }\n//             })\n//     }\n//\n//     private saveUser() {\n//         // create or update user based on id param\n//         return this.id\n//             ? this.accountService.update(this.id!, this.form.value)\n//             : this.accountService.register(this.form.value);\n//     }\n// }","map":null,"metadata":{},"sourceType":"script"}