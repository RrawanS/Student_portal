{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { User } from '../_models';\nimport { Student } from '../_models';\nimport { LevelOfStudyEnum } from '../_models';\nimport { FacultyEnum } from '../_models';\nimport { ProgramEnum } from '../_models';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n    this.levelOfStudyOptions = Object.values(LevelOfStudyEnum);\n    this.programOptions = Object.values(ProgramEnum);\n    this.facultyOptions = Object.values(FacultyEnum);\n  }\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  initForm() {\n    this.registerUserForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      birthDate: ['', [Validators.required, this.pastDateValidator]],\n      levelOfStudy: ['', Validators.required],\n      program: ['', Validators.required],\n      faculty: ['', Validators.required],\n      passWord: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassWord: ['', Validators.required]\n    });\n  }\n\n  get f() {\n    return this.registerUserForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    this.alertService.clear();\n\n    if (this.registerUserForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.accountService.register(this.prepareRequest()).pipe(first()).subscribe(() => {\n      this.alertService.success('Registration successful', {\n        keepAfterRouteChange: true\n      });\n      this.router.navigate(['../login'], {\n        relativeTo: this.route\n      });\n      this.loading = false;\n    }, errorResponse => {\n      if (errorResponse && errorResponse.error) {\n        this.alertService.error(errorResponse.error, {\n          autoClose: false\n        });\n      } else {\n        this.alertService.error('An error occurred during registration.', {\n          autoClose: false\n        });\n      }\n\n      this.loading = false;\n    });\n  }\n\n  pastDateValidator(control) {\n    const currentDate = new Date();\n    const selectedDate = new Date(control.value);\n\n    if (selectedDate >= currentDate) {\n      return {\n        futureDate: true\n      };\n    }\n\n    return null;\n  }\n\n  prepareRequest() {\n    const user = new User();\n    const student = new Student();\n    student.firstName = this.registerUserForm.value.firstName;\n    student.lastName = this.registerUserForm.value.lastName;\n    student.email = this.registerUserForm.value.email;\n    student.birthDate = this.registerUserForm.value.birthDate;\n    student.levelOfStudy = this.registerUserForm.value.levelOfStudy;\n    student.program = this.registerUserForm.value.program;\n    student.faculty = this.registerUserForm.value.faculty;\n    user.student = student;\n    user.passWord = this.registerUserForm.value.passWord;\n    user.confirmPassWord = this.registerUserForm.value.confirmPassWord;\n    return user;\n  }\n\n};\nRegisterComponent = __decorate([Component({\n  templateUrl: 'register.component.html'\n})], RegisterComponent);\nexport { RegisterComponent };","map":null,"metadata":{},"sourceType":"module"}